name: deploy landing

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-[0-9]+-landing*'

env:
  STAGING_URL: https://ichack-25-staging-898gr.ondigitalocean.app/api
  PROD_URL: https://my.ichack.org/api

jobs:
  determine-env:
    outputs:
      deploy-env: ${{ steps.get-env.outputs.deploy-env }}
    runs-on: ubuntu-latest
    steps:
      - name: Get env
        id: get-env
        run: |
          if [[ $GITHUB_REF == refs/tags/*-staging ]]; then
            echo "deploy-env=staging" >> "$GITHUB_OUTPUT"
          else
            echo "deploy-env=production" >> "$GITHUB_OUTPUT"
          fi

  build:
    outputs:
      base-tag: ${{ steps.tags.outputs.base-tag }}
    runs-on: ubuntu-latest
    needs: determine-env
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.1.44

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./node_modules
            ./bun.lock
          key: ${{ runner.os }}-bun-${{ hashFiles('./bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Set ENV
        run: |
          if [[ ${{ needs.determine-env.outputs.deploy-env }} == "staging" ]]; then
            echo "NUXT_PUBLIC_API_BASE_URL=$STAGING_URL" >> "$GITHUB_ENV"
          else
            echo "NUXT_PUBLIC_API_BASE_URL=$PROD_URL" >> "$GITHUB_ENV"
          fi

      - name: Build project
        run: bun run build:landing

      - name: Upload landing static files artifact
        uses: actions/upload-artifact@v4
        with:
          name: landing-static
          path: packages/www/dist

      - name: Fetch and set tags
        id: tags
        run: |
          git fetch --tags
          latest=$(git tag --list 'v*' --sort=-creatordate | grep '-landing$' | head -n 2 | tail -n 1)

          echo "base-tag=$latest" >> "$GITHUB_OUTPUT"
          echo "Latest Production Tag: $latest"

  deploy:
    needs: [build, determine-env]
    runs-on: ubuntu-latest
    steps:
      - name: Download landing artifact
        uses: actions/download-artifact@v4
        with:
          name: landing-static
          path: dist

      - name: Set branch name
        run: |
          if [[ ${{ needs.determine-env.outputs.deploy-env }} == "staging" ]]; then
            echo "BRANCH_NAME=isabella" >> "$GITHUB_ENV"
          else
            echo "BRANCH_NAME=production" >> "$GITHUB_ENV"
          fi

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=ichack25 --branch=${{ env.BRANCH_NAME }}

  generateChangelog:
    needs: [deploy, build]
    if: endsWith(github.ref, '-landing')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Generate changelog
        run: |
          base_tag=$(echo ${{ needs.build.outputs.base-tag }})

          echo "Generating changelog since $base_tag"
          git log --pretty=format:"- %s (%an)" $base_tag..HEAD | tee CHANGELOG.md

      - name: Push to Discord
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          base_tag=$(echo ${{ needs.build.outputs.base-tag }})
          CHANGELOG=$(cat CHANGELOG.md)

          payload=$(jq -n \
              --arg title "Deployed to Production: ${{ github.ref_name }}" \
              --arg description "Changes since last production deployment **$base_tag**:" \
              --arg changelog "$CHANGELOG" \
              --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")" \
              '{
                username: "IC Hack Changelog Bot",
                avatar_url: "https://ichack.org/favicon.ico",
                embeds: [
                  {
                    title: $title,
                    description: ($description + "\n\n" + $changelog),
                    color: 24806,
                    timestamp: $timestamp,
                    url: "https://github.com/icdocsoc/ichack"
                  }
                ]
              }'
            )

          curl -X POST -H "Content-Type: application/json" -d "$payload" "$WEBHOOK_URL"
