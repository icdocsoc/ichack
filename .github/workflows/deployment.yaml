name: staging

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.1.38

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build project
        run: bun run build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: landing-static
          path: packages/www/dist

  testServer:
    needs: build
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:16
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.1.38

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Upload schema
        run: |
          PGPASSWORD=postgres psql -U postgres -h localhost -p 5432 -d postgres -f ./data/schema.sql

      - name: Run tests
        run: bun test server
        env:
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDB: postgres
          PGHOST: localhost
          PGPORT: 5432

  testE2E:
    needs: [testServer]
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:16
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.1.38

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright
        run: bunx playwright install --with-deps

      - name: Run tests
        run: bun test:e2e
        env:
          CI: true
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDB: postgres
          PGHOST: localhost
          PGPORT: 5432

  deploy-landing-staging:
    needs: [testServer, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download landing artifact
        uses: actions/download-artifact@v4
        with:
          name: landing-static
          path: dist

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=ichack25

  hold-prod-deployment:
    needs: [deploy-landing-staging]
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Hold deployment
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: cybercoder-naj,dropheart
          minimum-approvals: 1
          issue-title: 'deploy: actions ${{ github.run_number }} to production'
          issue-body: 'Please approve or deny the deployment.'

  deploy-landing-prod:
    needs: [hold-prod-deployment]
    runs-on: ubuntu-latest
    steps:
      - name: Download landing artifact
        uses: actions/download-artifact@v4
        with:
          name: landing-static
          path: dist

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=ichack25 --branch=production
